from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives.asymmetric import rsa
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.asymmetric import padding

def GerarParDeChaves():
  private_key = rsa.generate_private_key(
                                          public_exponent=65537,
                                          key_size=3072,
                                          backend=default_backend(), )
  public_key = private_key.public_key()
  return private_key, public_key

def CriarArquivoPem(private_key, public_key):
  private_bytes = private_key.private_bytes(
          encoding=serialization.Encoding.PEM,
          format=serialization.PrivateFormat.PKCS8,
          encryption_algorithm=serialization.NoEncryption(), )

  with open('private_key.pem', 'xb') as private_file:
    private_file.write(private_bytes)

  public_bytes = public_key.public_bytes(
          encoding=serialization.Encoding.PEM,
          format=serialization.PublicFormat.SubjectPublicKeyInfo, )
  
  with open('public_key.pem', 'xb') as public_file:
    public_file.write(public_bytes)
  
# Abre o arquivo .pem
def AbreArquivoPem(private_file, public_file):
  with open('public_key.pem', 'r') as arquivo:
      conteudo = arquivo.read()
      print(conteudo)
      
      with open('private_key.pem', 'r') as arquivo:
        conteudo = arquivo.read()
        print(conteudo)
      
      with open('private_key.pem', 'rb') as private_file:
        loaded_private_key = serialization.load_pem_private_key(
                              private_file.read(),
                              password=None,
                              backend=default_backend()
                            )

      with open('public_key.pem', 'rb') as public_file:
        loaded_public_key = serialization.load_pem_public_key(
                            public_file.read(),
                            backend=default_backend()
                          )
  return loaded_private_key, loaded_public_key

if __name__ == "__main__":
  private_key, public_key = GerarParDeChaves()
  CriarArquivoPem(private_key, public_key)
  AbreArquivoPem(private_key, public_key)


















# FALTA VER ISSO 
def GerarPadding(loaded_public_key, loaded_private_key):
  padding_config = padding.OAEP(
                      mgf=padding.MGF1(algorithm=hashes.SHA256()),
                      algorithm=hashes.SHA256(),
                      label=None, )

  plaintext = b'Bob, este eh um segredo. Nao conte para ninguem. Ass: Alice'

  ciphertext = loaded_public_key.encrypt(
                      plaintext=plaintext,
                      padding=padding_config, )

  print("Texto cifrado (hex):", ciphertext.hex())
  print("Tamanho:", len(ciphertext), "bytes" )
  print("Tamanho:", len(ciphertext)*8, "bits (!)" )

  decrypted_by_private_key = loaded_private_key.decrypt(
                              ciphertext=ciphertext,
                              padding=padding_config)

  print("Texto descriptografado (hex):", decrypted_by_private_key.hex())
  print("Tamanho:", len(decrypted_by_private_key), "bytes" )
  print('Text:', decrypted_by_private_key)

  ciphertext1 = loaded_public_key.encrypt(
                      plaintext=plaintext,
                      padding=padding_config, )

  ciphertext2 = loaded_public_key.encrypt(
                      plaintext=plaintext,
                      padding=padding_config, )

  ciphertext3 = loaded_public_key.encrypt(
                      plaintext=plaintext,
                      padding=padding_config, )

  print("Texto cifrado 1 (hex):", ciphertext1.hex())
  print("Texto cifrado 2 (hex):", ciphertext2.hex())
  print("Texto cifrado 3 (hex):", ciphertext3.hex())

  decrypted1 = loaded_private_key.decrypt(
                              ciphertext=ciphertext1,
                              padding=padding_config)
  print('Text:', decrypted1)

  decrypted2 = loaded_private_key.decrypt(
                              ciphertext=ciphertext2,
                              padding=padding_config)
  print('Text:', decrypted2)

  decrypted3 = loaded_private_key.decrypt(
                              ciphertext=ciphertext3,
                              padding=padding_config)
  print('Text:', decrypted3)
